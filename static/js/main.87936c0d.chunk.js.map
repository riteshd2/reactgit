{"version":3,"sources":["Exam.js","Covid.js","Quotes.js","serviceWorker.js","index.js"],"names":["Component","Quotes","props","state","data","loader","ribbon","handleChange","e","value","setState","self","this","axios","then","response","console","log","catch","error","Container","Header","as","icon","content","Card","Group","length","map","load","fluid","Description","Segment","raised","Placeholder","image","Line","quote","Label","color","Math","floor","random","author","Content","style","padding","fontSize","text","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4RAGmBA,Y,mCCECA,Y,yBC+ELC,E,kDA9EX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAGVC,MAAQ,CACJC,KAAK,GACLC,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GACpBC,OAAO,CAAC,MAAM,SAAS,SAAS,QAAQ,QAAQ,OAAO,OAAO,SAAS,SAAS,OAAO,QAAQ,OAAO,UAPxF,EA2BpBC,aAAe,SAACC,EAAD,OAAMC,EAAN,EAAMA,MAAN,OAAkB,EAAKC,SAAS,CAAED,WA3B7B,E,gEAWd,IAAIE,EAAOC,KACXC,IAAM,CACF,OAAS,MACT,IAAM,gCAGLC,MAAK,SAACC,GACHJ,EAAKD,SACD,CAACN,KAAOW,EAASX,OAEvBY,QAAQC,IAAIF,MAEbG,OAAM,SAACC,GACNH,QAAQC,IAAIE,Q,+BAIb,IAAD,OACJ,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,KAAKC,KAAK,OAAOC,QAAQ,mBACpC,kBAACC,EAAA,EAAKC,MAAN,KAE8B,GAAxBd,KAAKT,MAAMC,KAAKuB,OAAWf,KAAKT,MAAME,OAAOuB,KAAI,SAACC,GAAD,OAC3C,kBAACJ,EAAA,EAAD,CAAMK,OAAK,GACP,kBAACL,EAAA,EAAKM,YAAN,KACI,kBAACC,EAAA,EAAD,CAASC,QAAM,GACX,kBAACC,EAAA,EAAD,KACA,kBAACA,EAAA,EAAYb,OAAb,CAAoBc,OAAK,GACrB,kBAACD,EAAA,EAAYE,KAAb,MACA,kBAACF,EAAA,EAAYE,KAAb,cAMjB,GAGNxB,KAAKT,MAAMC,KAAKwB,KAAI,SAACS,GAAD,OACrB,kBAACZ,EAAA,EAAD,CAAMK,OAAK,GACP,kBAACE,EAAA,EAAD,KACA,kBAACM,EAAA,EAAD,CAAOhB,GAAG,IAAIiB,MAAO,EAAKpC,MAAMG,OAAOkC,KAAKC,MAAMD,KAAKE,SAAW,EAAKvC,MAAMG,OAAOqB,SAAUrB,OAAO,QACnG+B,EAAMM,OAAQN,EAAMM,OAAO,WAEjC,kBAAClB,EAAA,EAAKmB,QAAN,KACA,kBAACnB,EAAA,EAAKJ,OAAN,CAAawB,MAAO,CAACC,QAAQ,OAAQC,SAAS,SAAUV,EAAMW,kB,GA1D7DhD,aCODiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd7C,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM6C,c","file":"static/js/main.87936c0d.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport { Container,Header,Button, Card, Image,Form, Checkbox } from 'semantic-ui-react';\r\n\r\nclass Exam extends Component{\r\n    state = {}\r\n  handleChange = (e, { value }) => this.setState({ value }) \r\n    render(){\r\n        return (\r\n            <Container>\r\n                <Header as='h2' icon='plug' content='Exam' />\r\n                <Form>\r\n                <Card.Group>\r\n                    <Card fluid>\r\n                    <Card.Content>\r\n                        <Card.Header>What is the capital of India?</Card.Header>\r\n                        {/* <Card.Meta>Friends of Elliot</Card.Meta> */}\r\n                        <Card.Description>\r\n                        <Form.Field>\r\n                            <Checkbox\r\n                                radio\r\n                                label='Choose this'\r\n                                name='checkboxRadioGroup'\r\n                                value='this'\r\n                                checked={this.state.value === 'this'}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                            <Checkbox\r\n                                radio\r\n                                label='Or that'\r\n                                name='checkboxRadioGroup'\r\n                                value='that'\r\n                                checked={this.state.value === 'that'}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                            <Checkbox\r\n                                radio\r\n                                label='Or that'\r\n                                name='checkboxRadioGroup'\r\n                                value='that'\r\n                                checked={this.state.value === 'that'}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                            <Checkbox\r\n                                radio\r\n                                label='Or that'\r\n                                name='checkboxRadioGroup'\r\n                                value='that'\r\n                                checked={this.state.value === 'that'}\r\n                                onChange={this.handleChange}\r\n                            />\r\n                            </Form.Field> \r\n                        </Card.Description>\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                        <div className='ui two buttons'>\r\n                        <Button basic color=\"blue\">\r\n                            Previous\r\n                        </Button>\r\n                        \r\n                        <Button basic color=\"blue\">\r\n                            Next\r\n                        </Button>\r\n                        </div>\r\n                    </Card.Content>\r\n                    </Card>\r\n                </Card.Group>\r\n                </Form>\r\n            \r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Exam;","import React, {Component} from \"react\";\r\nimport { Container,Header,Button, Card, Image,Form, Table, Flag } from 'semantic-ui-react';\r\nimport axios from \"axios\";\r\n\r\nconst flagRenderer = (item) => <Flag name={item} />;\r\nclass Covid extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {data:[]}\r\n    }\r\n    \r\n    componentDidMount() {\r\n        axios({\r\n            \"method\":\"GET\",\r\n            \"url\":\"https://covid-19-data.p.rapidapi.com/country/all\",\r\n            \"headers\":{\r\n            \"content-type\":\"application/octet-stream\",\r\n            \"x-rapidapi-host\":\"covid-19-data.p.rapidapi.com\",\r\n            \"x-rapidapi-key\":\"713cd8f77bmsh9a5002439da72bbp1d520fjsnd2b28b8cfaab\",\r\n            \"useQueryString\":true\r\n            },\"params\":{\r\n            \"format\":\"json\"\r\n            }\r\n            })\r\n            .then((response)=>{\r\n              console.log(response)\r\n            })\r\n            .catch((error)=>{\r\n              console.log(error)\r\n            })\r\n      }\r\n  handleChange = (e, { value }) => this.setState({ value }) \r\n    render(){\r\n        return (\r\n            <Container>\r\n                <Header as='h2' icon='plug' content='Exam' />\r\n                \r\n                <Card.Group>\r\n                    <Card fluid>\r\n                    <Card.Content>\r\n                        <Card.Header>Covid-19 Stats bY Country</Card.Header>\r\n                        {/* <Card.Meta>Friends of Elliot</Card.Meta> */}\r\n                        <Card.Description>\r\n                            {this.state.data}\r\n                        <Table>\r\n                            <Table.Header>\r\n                            <Table.Row>\r\n                                {/* <Table.HeaderCell>Flag</Table.HeaderCell> */}\r\n                                <Table.HeaderCell>Country</Table.HeaderCell>\r\n                                <Table.HeaderCell>confirmed</Table.HeaderCell>\r\n                                <Table.HeaderCell>critical</Table.HeaderCell>\r\n                                <Table.HeaderCell>recovered</Table.HeaderCell>\r\n                                <Table.HeaderCell>deaths</Table.HeaderCell>\r\n                            </Table.Row>\r\n                            </Table.Header>\r\n                            <Table.Body>\r\n                            {this.state.data.map((res) => (\r\n                                <Table.Row key={res.country}>\r\n                                {/* <Table.Cell>{flagRenderer(res.country)}</Table.Cell> */}\r\n                                <Table.Cell>{res.country}</Table.Cell>\r\n                                <Table.Cell>{res.confirmed}</Table.Cell>\r\n                                <Table.Cell>{res.critical}</Table.Cell>\r\n                                <Table.Cell>{res.recovered}</Table.Cell>\r\n                                <Table.Cell>{res.deaths}</Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                            </Table.Body>\r\n                        </Table>\r\n                        </Card.Description>\r\n                    </Card.Content>\r\n                    <Card.Content extra>\r\n                        <div className='ui two buttons'>\r\n                        <Button basic color=\"blue\">\r\n                            Previous\r\n                        </Button>\r\n                        \r\n                        <Button basic color=\"blue\">\r\n                            Next\r\n                        </Button>\r\n                        </div>\r\n                    </Card.Content>\r\n                    </Card>\r\n                </Card.Group>\r\n                \r\n            \r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Covid;","import React, {Component} from \"react\";\r\nimport { Container,Header,Button,Grid,Label,Placeholder,Segment, Card, Image,Form, Table, Flag } from 'semantic-ui-react';\r\nimport axios from \"axios\";\r\n\r\n\r\nclass Quotes extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        \r\n    }\r\n    state = {\r\n        data:[], \r\n        loader:[1,2,3,4,5,6,7], \r\n        ribbon:['red','orange','yellow','olive','green','teal','blue','violet','purple','pink','brown','grey','black']\r\n    };\r\n    \r\n    componentDidMount() {\r\n        let self = this;\r\n        axios({\r\n            \"method\":\"GET\",\r\n            \"url\":\"https://type.fit/api/quotes\",\r\n            \r\n            })\r\n            .then((response)=>{\r\n                self.setState(\r\n                    {data : response.data}\r\n                );\r\n              console.log(response)\r\n            })\r\n            .catch((error)=>{\r\n              console.log(error)\r\n            })\r\n      }\r\n  handleChange = (e, { value }) => this.setState({ value }) \r\n    render(){\r\n        return (\r\n            <Container>\r\n                <Header as='h2' icon='plug' content='Popular Quotes' />\r\n                <Card.Group>\r\n                    \r\n                    {(this.state.data.length==0)?this.state.loader.map((load)=>(\r\n                            <Card fluid>\r\n                                <Card.Description>\r\n                                    <Segment raised>\r\n                                        <Placeholder>\r\n                                        <Placeholder.Header image>\r\n                                            <Placeholder.Line />\r\n                                            <Placeholder.Line />\r\n                                        </Placeholder.Header>          \r\n                                        </Placeholder>\r\n                                    </Segment>\r\n                                    </Card.Description>\r\n                                </Card>\r\n                        )):''\r\n                    }\r\n\r\n                    {this.state.data.map((quote) => (\r\n                    <Card fluid>\r\n                        <Segment>\r\n                        <Label as='a' color={this.state.ribbon[Math.floor(Math.random() * this.state.ribbon.length)]} ribbon='left'>\r\n                        {(quote.author)?quote.author:'Unknown'}\r\n                        </Label>\r\n                    <Card.Content>\r\n                    <Card.Header style={{padding:'15px', fontSize:'20px'}}>{quote.text}</Card.Header>\r\n{/*                         \r\n                        <Card.Description>\r\n                        </Card.Description>\r\n                    <Card.Meta>{quote.author}</Card.Meta> */}\r\n                    </Card.Content>\r\n                    </Segment>\r\n                    </Card>\r\n                    ))                    \r\n                    }\r\n\r\n\r\n                   \r\n                </Card.Group>\r\n                \r\n            \r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Quotes;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport Exam from './Exam';\nimport Covid from './Covid';\nimport Quotes from './Quotes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Quotes />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}